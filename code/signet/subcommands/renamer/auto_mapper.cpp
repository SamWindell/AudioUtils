#include "auto_mapper.h"

#include <regex>

void AutoMapper::CreateCLI(CLI::App &renamer) {
    auto auto_map = renamer.add_subcommand(
        "auto-map",
        R"^^(Samplers can often read the root, low and high MIDI note numbers from within a filename. This command makes inserting the low and high keys into the filename simple.

    First you specify a regex pattern that captures a number representing the MIDI root note from the input filenames. This tool collects all of the root notes found in each folder, and works out reasonable values for what the low and high MIDI notes should be.

    You control the format of the renaming by specifing a pattern containing substitution variables for <lo>, <root> and <high>. These variables are replaced by the MIDI note numbers in the range 0 to 127.)^^");

    auto_map
        ->add_option("auto-map-filename-root-note-pattern", m_automap_pattern,
                     "The ECMAScript-style regex the should match against filename (excluding extension). "
                     "This regex should contain 1 capture group to represent the root note of the sample.")
        ->required();

    auto_map
        ->add_option(
            "auto-map-renamed-filename", m_automap_out,
            "The name of the output file (excluding extension). This should contain substitution variables "
            "<lo>, <root> and <hi> which will be replaced by the low MIDI note number, the root MIDI note "
            "number and the high MIDI note number. The low and high numbers are generated by the auto-mapper "
            "so that all samples in each folder will fill out the entire range 0-127.")
        ->required();
}

void AutoMapper::AddToFolderMap(const fs::path &path) {
    REQUIRE(m_automap_pattern);
    if (!path.has_parent_path()) {
        REQUIRE(false); // expecting canonical paths
        return;
    }

    const std::string filename = GetJustFilenameWithNoExtension(path);
    std::smatch pieces_match;
    std::regex r {*m_automap_pattern};
    if (std::regex_match(filename, pieces_match, r)) {
        if (pieces_match.size() != 2) {
            ErrorWithNewLine("AutoMapper: the regex pattern does not contain just 1 group ",
                             *m_automap_pattern);
            return;
        }

        const auto root_note = std::stoi(pieces_match[1]);
        if (root_note < 0 || root_note > 127) {
            WarningWithNewLine("AutoMapper: root note of file ", filename,
                               " is not in the range 0-127 so cannot be processed");
        } else {
            MessageWithNewLine("AutoMapper", "automap found root note ", root_note, " in filename ", path);
            const auto parent = path.parent_path().generic_string();
            m_folder_map[parent].AddFile(path, root_note);
        }
    }
}

void AutoMapper::ConstructAllAutomappings() {
    for (auto &[path, folder] : m_folder_map) {
        folder.Automap();
    }
}

void AutoMapper::InitialiseProcessing(const tcb::span<EditTrackedAudioFile> files) {
    if (m_automap_pattern) {
        for (auto &f : files) {
            AddToFolderMap(f.GetPath());
        }
        ConstructAllAutomappings();
    }
}

bool AutoMapper::Rename(const EditTrackedAudioFile &f, std::string &filename) {
    if (m_automap_pattern) {
        auto &folder = m_folder_map[f.GetPath().parent_path().generic_string()];
        if (const auto file = folder.GetFile(f.GetPath())) {
            auto new_name = *m_automap_out;
            Replace(new_name, "<lo>", std::to_string(file->low));
            Replace(new_name, "<hi>", std::to_string(file->high));
            Replace(new_name, "<root>", std::to_string(file->root));
            filename = new_name;
            return true;
        }
    }
    return false;
}
